#!/usr/bin/env bash

# Prepares a remote server for installation of a Checknner instance
# Usage: remote_init [OPTIONS] SSH_CONNECTION DOMAIN SENTRY_DSN EXPORT_PREFIX

# Arguments:
#   SSH_HOST        The SSH connection string used to reach the remote instance
#   DOMAIN          The domain at which this instance will be reachable
#   SENTRY_DSN      The DSN to which Sentry-captured errors will be reported
#   EXPORT_PREFIX   The prefix behind which to hide sensitive data

# Options:
#   --app-user NAME     The user under which the app will run as well as the
#                       name of the postgres user and postgres database to be
#                       used by the instance [default: checkniner]

set -e
set -o pipefail

function die { echo $@; exit 1; }

APP_USER="checkniner"
while true; do
    case "$1" in
        --app-user)
            APP_USER="$2"
            shift 2
            ;;
        -*)
            die "Error: Unknown argument '$1'"
            ;;
        *)
            break
            ;;
    esac
done

CONNECTION=$1
DOMAIN=$2
SENTRY_DSN=$3
EXPORT_PREFIX=$4

[[ -z "$CONNECTION" ]] && die "Error: Please provide the SSH_CONNECTION for the remote server"
[[ -z "$DOMAIN" ]] && die "Error: Please provide the DOMAIN for this installation"
[[ -z "$SENTRY_DSN" ]] && die "Error: Please provide the SENTRY_DSN for this installation"
[[ -z "$EXPORT_PREFIX" ]] && die "Error: Please provide the EXPORT_PREFIX for this installation"

REPOSITORY=https://github.com/eallrich/checkniner.git

SITE_ROOT="/home/$APP_USER/checkniner"

ssh $CONNECTION "sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade --assume-yes --quiet"
ssh $CONNECTION "sudo apt-get install --assume-yes byobu git fail2ban"
ssh $CONNECTION "sudo apt-get autoremove --assume-yes"
# Thanks to http://askubuntu.com/a/94067 for this one-liner.
ssh $CONNECTION "sudo adduser --disabled-password --gecos '' $APP_USER"

# We 'cd' to a commonly-reachable directory first in order to avoid an error
# regarding permissions (since the app_user doesn't have access to the first
# user's homedir)
ssh $CONNECTION "cd /; sudo --set-home --user=$APP_USER git clone $REPOSITORY $SITE_ROOT"

echo "Invoking $SITE_ROOT/scripts/setup on the remote instance"
ssh $CONNECTION "sudo $SITE_ROOT/scripts/setup --app-user $APP_USER $ALLOWED_HOSTS $SENTRY_DSN $EXPORT_PREFIX"

echo "Finished remote initialization"
