#!/usr/bin/env bash

# Sets up a Checkniner instance for the first time.
# Usage: setup [OPTIONS] DOMAIN SENTRY_DSN EXPORT_PREFIX

# Arguments:
#   DOMAIN          The domain at which this instance will be reachable
#   SENTRY_DSN      The DSN to which Sentry-captured errors will be reported
#   EXPORT_PREFIX   The prefix behind which to hide sensitive data

# Options:
#   --app-user NAME     The user under which the app will run as well as the
#                       name of the postgres user and postgres database to be
#                       used by the instance [default: checkniner]
#   --add-swap MiB      The size (in MiB) of additional swap to configure
#                       [default: no swap]

set -e
set -o pipefail

function die { echo $@; exit 1; }

APP_USER="checkniner"
SWAP_SIZE=""
while true; do
    case "$1" in
        --app-user)
            APP_USER="$2"
            shift 2
            ;;
        --add-swap)
            SWAP_SIZE="$2"
            shift 2
            ;;
        -*)
            die "Error: Unknown argument '$1'"
            ;;
        *)
            break
            ;;
    esac
done

DOMAIN=$1
SENTRY_DSN=$2
EXPORT_PREFIX=$3

[[ -z "$DOMAIN" ]] && die "Error: Please provide the DOMAIN for this instance"
[[ -z "$SENTRY_DSN" ]] && die "Error: Please provide the SENTRY_DSN for this instance"
[[ -z "$EXPORT_PREFIX" ]] && die "Error: Please provide the EXPORT_PREFIX for this instance"

PG_DATABASE="$APP_USER"
SECRET_KEY=$(python -c "import base64, os; print base64.b64encode(os.urandom(40))")
SITE_ROOT="$(readlink -f "$(dirname "$0")/..")"

echo "-----------------------------------"
echo "Proceeding with this configuration:"
echo "-----------------------------------"
echo "  DOMAIN:         $DOMAIN"
echo "  SENTRY_DSN:     $SENTRY_DSN"
echo "  EXPORT_PREFIX:  $EXPORT_PREFIX"
echo "  APP_USER:       $APP_USER"
echo "  PG_DATABASE:    $PG_DATABASE"
echo "  SECRET_KEY:     $SECRET_KEY"
echo "  SITE_ROOT:      $SITE_ROOT"
echo "  SWAP_SIZE:      $([[ -z "$SWAP_SIZE" ]] && echo "(none)" || echo "$SWAP_SIZE")"
echo "-----------------------------------"

echo "Picking en_us.UTF-8 as the locale"
# Postgres correctly insists on the locale being set properly
# Thanks to http://stackoverflow.com/a/17712701 for these!
locale-gen en_US en_US.UTF-8 
sudo dpkg-reconfigure locales

echo "Installing dependencies from system packages"
PACKAGES="build-essential python-virtualenv python-dev postgresql libpq-dev nginx supervisor"
sudo apt-get install --assume-yes $PACKAGES

echo "Initializing postgres with username=$APP_USER and database=$PG_DATABASE"
# If we don't 'cd' into a commonly-viewable path before the sudo command we
# get an error message about permissions (since the postgres user can't see
# the root user's homedir).
pushd /
sudo --set-home --user=postgres bash -c "echo '\
CREATE DATABASE $PG_DATABASE; \
CREATE USER $APP_USER; \
GRANT ALL PRIVILEGES ON DATABASE $PG_DATABASE to $APP_USER; \
\\q' | psql"
popd

echo "Setting up supervisor configuration"
cat $SITE_ROOT/etc/supervisor.conf \
    | sed "s@{{ host_user }}@$APP_USER@g" \
    | sudo tee /etc/supervisor/conf.d/checkniner_$APP_USER.conf
sudo service supervisor restart
# For Ubuntu 16.04 (with systemd), a couple additional tweaks thanks to
# http://unix.stackexchange.com/a/291098. The first sets it to auto-start, the
# second brings supervisor up now.
sudo systemctl enable supervisor
sudo systemctl start supervisor

# We're going to start with an unsecured Nginx configuration which supports
# routing ACME HTTP challenges so we can get TLS certs later.

NGINX=/etc/nginx/sites-enabled
echo "Setting up HTTP nginx configuration"
sudo rm -f $NGINX/default
cat $SITE_ROOT/etc/nginx.unsecure \
    | sed "s@{{ site_root }}@$SITE_ROOT@g" \
    | sed "s@{{ domain_name }}@$DOMAIN@g" \
    | sed "s@{{ export_prefix }}@$EXPORT_PREFIX@g" \
    | sudo tee $NGINX/$DOMAIN

if [ ! -f $NGINX/block_unknown ]; then
    echo "Adding nginx config to block all requests for unknown hosts"
    # We're the first so there can't be any HTTPS connections to worry about
    sudo cp $SITE_ROOT/etc/nginx.block_unknown_80 $NGINX/block_unknown
fi
sudo service nginx restart

echo "Creating virtualenv"
sudo --set-home --user=$APP_USER virtualenv $SITE_ROOT

echo "===> Setting env vars"
echo "export ALLOWED_HOSTS=$DOMAIN" >> $SITE_ROOT/bin/activate
echo "export DATABASE_URL=postgres://$APP_USER@/$PG_DATABASE" >> $SITE_ROOT/bin/activate
echo "export DJANGO_SETTINGS_MODULE=cotracker.settings.production" >> $SITE_ROOT/bin/activate
echo "export PYTHONPATH=$SITE_ROOT/cotracker/" >> $SITE_ROOT/bin/activate
echo "export SECRET_KEY=$SECRET_KEY" >> $SITE_ROOT/bin/activate
echo "export SENTRY_DSN=$SENTRY_DSN" >> $SITE_ROOT/bin/activate
echo "export EXPORT_PREFIX=$EXPORT_PREFIX" >> $SITE_ROOT/bin/activate

sudo --set-home --user=$APP_USER $SITE_ROOT/scripts/bootstrap
sudo --set-home --user=$APP_USER $SITE_ROOT/scripts/update

echo "Finished setting up checkniner, restarting gunicorn"
sudo supervisorctl restart gunicorn_$APP_USER

if [[ ! -z "$SWAP_SIZE" ]]; then
    echo "Adding swap of ${SWAP_SIZE}MB"
    SWAP_PATH="/var/swap"
    sudo dd if=/dev/zero of=$SWAP_PATH bs=1M count=$SWAP_SIZE
    sudo chmod 600 $SWAP_PATH
    sudo mkswap $SWAP_PATH
    sudo swapon $SWAP_PATH
    echo "$SWAP_PATH      none    swap    sw    0    0" \
        | sudo tee --append /etc/fstab
fi

echo "Finished setting up"
