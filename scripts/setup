#!/bin/bash

# scripts/setup
# =============
# Set up application for the first time after cloning.
#
# !! Requires sudo
#
# Usage
# -----
# > scripts/setup [hosted domain] [Sentry DSN] [export prefix] [host user]
# e.g.
# > scripts/setup example.com https://access:key@sentry.example.com/2 ZYXWVUTSR staging
#
# The 'host user' parameter is not required. If not provided, the default
# ('checkniner') will be used instead.
#
# Assumptions
# -----------
# - The hosting user, postgres user, and postgres DB all share the same name
#

echo "===> Starting scripts/setup"

ALLOWED_HOSTS=$1
SENTRY_DSN=$2
EXPORT_PREFIX=$3
HOST_USER=$5
if [ -z "$HOST_USER" ]; then
    HOST_USER=checkniner
fi
PG_DATABASE="$HOST_USER"
SECRET_KEY=$(python -c "import base64, os; print base64.b64encode(os.urandom(40))")
# Found this one-liner via http://stackoverflow.com/a/246128. Thanks!
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# The script dir is checkniner/scripts. The site root will be up one level.
SITE_ROOT="$(dirname "$SCRIPT_DIR")"
echo "     ALLOWED_HOSTS:     $ALLOWED_HOSTS"
echo "     SENTRY_DSN:        $SENTRY_DSN"
echo "     EXPORT_PREFIX:     $EXPORT_PREFIX"
echo "     PG_DATABASE:       $PG_DATABASE"
echo "     HOST_USER:         $HOST_USER"
echo "     SECRET_KEY:        $SECRET_KEY"
echo "     SITE_ROOT:         $SITE_ROOT"


echo "===> Setting locale"
# Postgres correctly insists on the locale being set properly
# Thanks to http://stackoverflow.com/a/17712701 for these!
locale-gen en_US en_US.UTF-8 
sudo dpkg-reconfigure locales


echo "===> Installing system packages"
PACKAGES="python-virtualenv python-dev postgresql libpq-dev nginx supervisor"
sudo apt-get install --assume-yes $PACKAGES


echo "===> Setting up postgres user & database"
# Developer Note: A couple of things to be aware of in this configuation:
# - We're using peer authentication, so we don't need a password or a hostname
# - This will work as long as django and the database are on the same host
# This initial 'cd /' avoids an error message caused by the postgres user
# attempting to navigate to the /root directory (the default directory for the
# root user) when 'sudo -u ...' is invoked.
cd /
sudo -u postgres bash -c "echo \"CREATE DATABASE $PG_DATABASE; CREATE USER $HOST_USER; GRANT ALL PRIVILEGES ON DATABASE $PG_DATABASE to $HOST_USER;\\q\" | psql"


echo "===> Updating supervisor configuration"
CONF_DIR=/etc/supervisor/conf.d
sudo cp $SITE_ROOT/etc/supervisor.conf $CONF_DIR/checkniner_$HOST_USER.conf
sudo sed -i i"s@{{ host_user }}@$HOST_USER@g" $CONF_DIR/checkniner_$HOST_USER.conf
sudo service supervisor stop
sudo service supervisor start


# We're going to start with an unsecured Nginx configuration which supports
# routing ACME HTTP challenges (e.g. from Let's Encrypt). This will enable us
# to get TLS certificates later if we choose to do so.
#
# WARNING: If ALLOWED_HOSTS contains comma-seperated entries such as
# 'example.com,www.example.com' this section will not run correctly!

CONF_DIR=/etc/nginx
echo "===> Updating nginx configuration (unsecured)"
sudo rm $CONF_DIR/sites-enabled/default
sudo cp $SITE_ROOT/etc/nginx.unsecure $CONF_DIR/sites-enabled/$ALLOWED_HOSTS
sudo sed -i "s@{{ site_root }}@$SITE_ROOT@g" $CONF_DIR/sites-enabled/$ALLOWED_HOSTS
sudo sed -i "s/{{ domain_name }}/$ALLOWED_HOSTS/g" $CONF_DIR/sites-enabled/$ALLOWED_HOSTS
sudo sed -i "s/{{ export_prefix }}/$EXPORT_PREFIX/g" $CONF_DIR/sites-enabled/$ALLOWED_HOSTS
sudo service nginx restart


echo "===> Creating virtualenv"
sudo -u $HOST_USER virtualenv $SITE_ROOT


echo "===> Setting env vars"
echo "export ALLOWED_HOSTS=$ALLOWED_HOSTS" >> $SITE_ROOT/bin/activate
echo "export DATABASE_URL=postgres://$HOST_USER@/$PG_DATABASE" >> $SITE_ROOT/bin/activate
echo "export DJANGO_SETTINGS_MODULE=cotracker.settings.production" >> $SITE_ROOT/bin/activate
echo "export PYTHONPATH=$SITE_ROOT/cotracker/" >> $SITE_ROOT/bin/activate
echo "export SECRET_KEY=$SECRET_KEY" >> $SITE_ROOT/bin/activate
echo "export SENTRY_DSN=$SENTRY_DSN" >> $SITE_ROOT/bin/activate
echo "export EXPORT_PREFIX=$EXPORT_PREFIX" >> $SITE_ROOT/bin/activate


echo "===> passing the baton to scripts/bootstrap"
sudo -u $HOST_USER $SITE_ROOT/scripts/bootstrap

echo "===> passing the baton to scripts/update"
sudo -u $HOST_USER $SITE_ROOT/scripts/update

echo "===> Everything is set up; Requesting supervisor to restart gunicorn"
sudo supervisorctl restart gunicorn_$HOST_USER

echo "===> setup completed"
